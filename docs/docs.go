// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/jwt": {
            "post": {
                "description": "Issue a JWT token based on provided user_token and sa_token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Issue a JWT token",
                "parameters": [
                    {
                        "description": "Issued a GA token",
                        "name": "jwtRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/auth.jwtRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return an GA token",
                        "schema": {
                            "$ref": "#/definitions/auth.jwtResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input or sa_token is required",
                        "schema": {
                            "$ref": "#/definitions/auth.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/jwt/refresh": {
            "post": {
                "description": "Refresh a JWT token based on provided token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh a JWT token",
                "parameters": [
                    {
                        "description": "Refresh an issued token",
                        "name": "refreshRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.refreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return an GA token",
                        "schema": {
                            "$ref": "#/definitions/auth.jwtResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/auth.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/auth.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "status bad request"
                }
            }
        },
        "auth.jwtRequest": {
            "type": "object",
            "properties": {
                "sa_token": {
                    "type": "string",
                    "example": "example_sa_token"
                },
                "user_token": {
                    "type": "string",
                    "example": "example_user_token"
                }
            }
        },
        "auth.jwtResponse": {
            "type": "object",
            "properties": {
                "expires_in": {
                    "type": "integer",
                    "example": 3600
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "auth.refreshRequest": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "example_jwt_token"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Your Project API",
	Description:      "This is a sample server",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
